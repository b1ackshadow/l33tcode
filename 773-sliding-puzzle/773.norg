@document.meta
title: 773 Sliding puzzle
description:
authors: blackshadow
categories: leetcode
created: 2024-11-26
updated: 2024-11-26T10:24:41+0530
version: 1.0.0
@end

* Problem Description
  On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

  The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

  Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.
** Test Cases
   ~ Input: board = [[1,2,3],[4,0,5]]
     Output: 1
     Explanation: Swap the 0 and the 5 in one move.
   ~ Input: board = [[1,2,3],[5,4,0]]
     Output: -1
     Explanation: No number of moves will make the board solved.
   ~ Input: board = [[4,1,2],[5,0,3]]
     Output: 5
     Explanation: 5 is the smallest number of moves that solves the board.
* Approach

  We can trun the problem into a string + BFS.
  ~ for example test case 1 - "123045"
  ~ then look for 0,  at that point we have a game state. Using this game state, we can also maintain visited map (string_game_state)
  ~ Using this game state we try to swap it with possible moves. For this we can use a pre-defined search move space
* Solution
** Implementation
   @code py
   @end
* Notes
  - Discuss edge cases or observations relevant to this problem.
  - Mention any optimizations or alternative approaches.

* Complexity Analysis
  - **Time Complexity**: O(N!) where N is the number of states.
  - **Space Complexity**: O(N) for the visited states.

* References
  - Link to the problem statement or related resources.

